
public class board {
	private int [][] board;
	private int boxSize = 0;
	private int size = 0;
	private int remove = 0;
	private static final String RED = "\033[0;31m"; 
	private static final String RESET = "\033[0m";
	
	public void generateBoard(int size, int remove) { 
		boxSize = (int) Math.sqrt(size);
		this.remove = remove;
		this.size = size;
		board = new int[size][size];
        fillDiagonal(); 
        fillRemaining(0, boxSize);
        removeKDigits(); 
    }
	
	public boolean inputBoard(int size) {
		boxSize = (int) Math.sqrt(size);
		this.size = size;
		this.board = new int[size][size];
		int [][] board = {
				{0,29,23,34,3,0,48,0,10,9,0,21,45,6,14,15,27,1,42,0,0,28,32,0,30,2,0,22,18,8,0,26,0,16,19,39,0,36,47,40,0,11,5,31,24,0,0,44,38},
				{4,31,10,44,5,0,24,41,1,19,0,25,0,29,36,17,32,6,0,35,9,45,18,49,39,34,3,46,0,47,0,0,0,0,0,26,8,0,0,0,20,0,37,7,11,0,30,33,0},
				{0,43,21,2,13,0,0,0,22,17,0,46,0,27,45,30,0,16,0,0,19,0,38,0,0,0,0,0,4,1,29,10,28,33,0,12,0,35,15,0,42,44,0,8,0,0,0,40,6},
				{30,45,41,18,0,0,32,0,43,0,0,0,0,15,7,40,5,26,0,11,22,33,1,44,27,8,16,47,0,17,24,49,37,21,0,0,10,0,29,9,0,0,28,46,13,20,39,42,12},
				{49,0,0,0,0,0,15,16,40,47,0,42,0,0,0,0,0,46,0,29,0,0,0,17,48,0,0,0,0,3,0,25,32,39,0,30,6,43,0,45,2,5,0,21,19,0,0,41,22},
				{36,0,20,0,35,0,27,28,0,13,0,39,30,26,0,38,0,0,0,0,0,42,41,5,0,19,10,4,0,6,31,0,9,11,40,0,25,17,34,33,0,0,14,3,0,29,49,0,15},
				{0,9,1,0,26,0,47,11,35,0,0,14,23,4,49,10,0,37,0,20,3,21,0,40,0,15,0,0,7,5,41,0,0,36,30,24,28,38,31,0,27,46,2,34,45,18,0,43,17},
				{45,42,0,0,36,1,6,0,0,3,0,0,49,0,4,0,13,14,34,0,2,0,43,35,41,0,0,15,0,27,46,18,20,10,38,37,29,26,33,23,21,30,44,0,16,0,5,0,48},
				{38,23,0,25,28,0,0,0,5,0,0,0,1,32,10,0,29,49,15,45,0,20,0,0,3,18,11,0,0,0,4,0,0,0,34,0,2,0,12,14,17,9,8,22,6,19,13,39,37},
				{14,48,0,0,33,27,0,10,31,37,7,15,4,30,22,20,41,0,44,0,0,1,36,26,21,29,34,42,0,0,11,8,0,0,45,38,0,5,0,0,40,47,0,9,0,2,12,0,3},
				{35,0,34,0,0,0,8,0,0,0,42,0,38,21,12,46,0,32,0,37,17,0,45,0,0,7,14,0,3,36,5,2,23,44,39,22,15,20,0,31,4,27,0,43,33,0,29,0,1},
				{17,44,2,10,19,13,41,34,14,27,11,20,40,16,30,42,3,36,8,43,5,39,47,0,12,28,37,0,6,9,1,21,0,22,0,0,32,45,0,0,0,18,0,35,0,0,46,31,26},
				{0,0,22,9,0,0,12,0,0,0,0,33,2,23,0,0,0,0,0,40,1,32,8,6,0,5,0,30,16,31,48,0,15,26,0,0,44,34,3,36,0,28,0,17,0,0,0,0,20},
				{0,0,0,0,0,29,0,0,17,22,0,48,0,45,0,11,47,0,35,23,26,0,44,31,0,46,4,13,0,49,40,37,41,0,42,43,0,8,25,19,0,16,34,10,36,27,14,0,32},
				{29,17,47,27,0,38,0,24,23,6,0,12,42,35,20,0,49,0,0,19,32,0,0,45,25,0,21,9,10,18,30,39,0,1,0,0,26,0,0,22,14,43,11,0,0,8,0,0,0},
				{0,19,28,0,0,35,11,39,47,0,0,0,0,36,0,0,24,0,0,21,0,0,49,15,26,6,29,44,45,46,8,22,34,0,4,5,17,48,32,0,3,0,43,40,9,10,37,0,0},
				{0,4,0,46,10,0,9,48,28,40,13,18,41,34,47,0,26,30,0,0,0,0,0,38,42,32,19,0,17,24,33,0,0,0,25,20,12,0,11,2,0,35,7,1,21,39,31,45,0},
				{26,3,0,0,0,45,0,19,15,43,32,37,10,46,0,14,9,28,0,13,0,24,2,11,1,0,7,12,5,38,6,31,21,42,0,0,23,30,18,39,8,34,22,4,20,0,27,0,0},
				{23,0,0,30,0,0,0,9,0,0,0,22,33,0,11,0,4,10,46,2,0,0,0,20,43,40,0,0,12,16,26,35,0,0,47,13,0,41,0,44,45,0,48,5,3,36,38,18,28},
				{1,22,18,40,2,31,39,30,25,0,3,45,0,5,0,33,8,0,0,38,44,46,0,41,17,48,0,34,0,11,23,20,14,43,15,47,19,0,27,37,0,10,26,0,49,12,24,0,13},
				{41,0,0,20,0,34,21,0,0,11,8,7,26,0,1,39,22,0,0,17,43,0,0,0,5,0,30,3,0,28,49,0,0,13,0,9,36,29,0,46,0,0,42,19,15,47,16,14,0},
				{48,41,5,28,45,12,0,27,39,34,16,30,29,10,15,25,14,20,47,7,0,0,0,0,0,0,31,33,0,21,3,6,46,40,32,0,38,23,49,8,9,0,35,13,0,44,2,0,11},
				{0,1,33,0,44,0,35,0,0,18,25,8,0,0,5,26,30,0,0,0,48,4,14,24,0,0,12,29,20,0,0,7,16,0,0,46,13,21,22,0,11,2,0,42,0,41,0,10,39},
				{0,37,42,29,27,7,0,26,0,0,41,0,31,3,0,16,33,11,17,9,0,0,0,0,49,45,28,48,30,0,13,34,0,2,10,0,24,6,0,1,12,32,0,14,4,21,22,47,19},
				{16,0,17,0,0,0,0,33,48,32,15,0,0,22,0,0,0,0,0,36,0,0,6,1,44,0,9,2,14,43,28,12,39,38,8,7,18,0,26,0,19,41,0,29,5,31,40,0,0},
				{0,2,4,38,6,19,0,0,0,44,21,47,0,24,29,13,0,0,3,8,45,0,0,30,40,0,15,32,22,25,17,0,49,0,11,48,0,14,0,0,35,33,16,0,43,23,20,0,0},
				{40,14,26,36,25,0,0,6,4,1,0,35,0,12,18,0,38,2,0,0,31,0,0,0,0,11,22,39,29,45,9,41,44,0,33,15,30,10,16,0,5,0,0,0,46,37,8,17,24},
				{9,0,31,0,39,3,0,0,7,0,0,5,46,14,0,0,0,0,0,0,0,35,0,10,8,0,13,20,36,0,0,23,24,47,0,27,42,25,44,0,29,0,32,28,48,30,0,12,33},
				{0,39,6,12,31,2,45,17,0,41,0,10,0,25,0,47,0,44,0,0,36,37,21,28,34,4,43,24,0,0,0,9,0,46,5,0,14,33,0,15,13,22,0,18,30,0,23,16,8},
				{11,34,0,22,21,0,49,37,0,12,19,13,18,38,0,0,0,23,0,39,0,0,0,46,0,0,48,45,0,0,15,0,0,0,0,25,27,7,0,0,16,40,0,36,0,0,0,26,44},
				{0,18,48,14,0,0,33,0,32,2,0,0,11,0,0,8,7,0,0,0,13,0,3,0,19,0,47,1,35,0,20,4,29,27,17,6,0,0,37,26,24,0,45,41,0,42,0,15,0},
				{0,0,0,37,47,0,25,0,0,29,22,1,43,0,17,45,40,48,33,42,30,6,5,2,36,9,0,11,44,0,0,0,18,0,3,0,46,39,19,41,38,12,0,20,28,0,34,35,49},
				{0,46,27,0,1,0,0,4,0,33,0,49,0,40,9,6,35,41,0,24,29,0,13,0,0,0,23,10,37,7,43,47,11,45,0,0,0,44,0,0,36,21,0,32,0,14,3,19,5},
				{0,7,44,23,0,41,0,31,3,45,47,34,27,8,0,0,21,18,0,0,15,0,39,32,0,26,0,0,13,12,14,42,36,19,22,0,0,0,43,0,0,48,0,0,0,38,0,6,2},
				{0,0,9,19,0,10,29,0,6,0,0,44,0,0,0,0,0,0,22,27,14,15,40,8,18,38,41,7,0,2,39,0,26,30,0,0,47,28,35,32,49,3,0,11,12,43,4,48,46},
				{10,15,25,43,9,0,19,29,46,31,18,38,0,0,16,49,45,39,21,26,28,12,27,7,24,22,8,0,33,37,2,11,5,20,6,3,0,0,0,13,0,17,30,0,42,0,48,0,4},
				{34,0,39,31,16,0,36,21,26,15,49,32,47,0,0,43,0,40,0,1,18,19,23,13,28,42,44,0,41,30,45,3,4,0,12,0,0,0,38,27,10,7,29,0,17,46,33,0,25},
				{0,0,45,0,0,48,0,40,20,0,14,0,34,0,0,0,0,0,0,0,0,0,16,39,46,33,0,0,0,0,35,0,38,0,7,21,41,12,30,25,28,0,19,2,32,3,0,5,9},
				{21,0,40,0,22,0,28,13,0,23,48,36,5,0,2,32,0,3,0,34,7,0,4,37,11,49,25,17,8,0,19,29,10,18,14,16,33,24,46,0,0,0,12,38,41,1,45,27,47},
				{13,0,3,0,24,0,42,0,27,0,17,9,8,0,19,12,0,47,4,25,11,30,0,14,0,0,2,21,15,0,0,40,0,0,46,35,43,18,0,48,6,29,10,23,26,0,0,37,16},
				{0,11,0,32,0,0,0,0,45,7,10,0,6,41,0,0,46,42,30,0,35,43,15,0,9,0,0,0,26,48,22,16,27,34,0,0,37,0,14,0,1,49,21,0,0,0,0,0,40},
				{7,33,46,4,30,37,26,0,0,0,24,0,16,44,0,0,0,13,0,10,23,40,48,29,45,0,38,0,32,39,0,43,47,25,1,31,22,9,8,42,0,36,15,0,35,6,0,20,0},
				{12,0,7,35,41,25,0,36,33,46,28,43,44,31,13,0,11,0,26,0,49,17,0,0,0,0,0,0,0,22,34,0,0,6,0,23,0,3,40,30,37,14,0,0,2,9,19,29,0},
				{44,13,19,45,8,9,30,0,0,16,5,0,25,0,24,0,0,27,0,0,4,47,29,3,23,39,46,43,48,0,32,17,33,41,2,42,11,15,0,18,0,6,0,0,0,0,28,34,0},
				{31,24,0,0,0,42,16,15,0,0,45,29,37,0,32,2,23,35,18,12,39,44,20,25,0,41,40,5,1,0,0,36,30,0,0,19,49,0,28,10,0,0,0,48,8,22,0,0,0},
				{6,36,0,0,29,0,40,32,0,10,23,17,14,19,48,0,16,0,1,30,38,2,35,21,22,0,0,37,0,0,47,0,42,4,43,34,39,46,0,12,25,8,49,0,27,5,44,7,0},
				{27,28,38,0,0,33,14,1,8,21,0,2,0,0,0,0,0,0,19,15,0,34,0,16,6,30,42,0,11,23,25,5,12,31,44,36,0,47,0,7,43,24,0,37,39,32,35,3,0},
				{39,10,15,0,23,20,1,7,18,0,12,0,3,0,40,31,6,0,41,22,25,8,0,19,33,0,32,38,21,0,37,46,45,28,49,4,48,0,0,0,0,0,24,16,14,0,17,0,0},
				{0,21,37,0,46,49,0,35,0,24,9,6,39,0,8,44,0,17,45,3,42,11,7,12,4,14,0,28,27,26,0,0,40,15,16,1,20,13,0,0,32,31,33,0,0,25,47,38,36}
		};
		if(board.length != size) {
			System.out.println("The input board has wrong size. Please input again.");
			return false;
		}
		this.board = board;
		return true;
	}
	
	public void fillDiagonal() { 
        for (int i = 0; i < size; i = i+boxSize) {
            fillBox(i, i); 
        }
    } 
	
	public void fillBox(int row,int col) { 
        int num; 
        for (int i = 0; i<boxSize; i++) { 
            for (int j = 0; j<boxSize; j++){ 
                do{ 
                    num = randomGenerator(size); 
                } 
                while (!checkBox(row, col, num)); 
                board[row+i][col+j] = num; 
            } 
        } 
    } 
	
	boolean fillRemaining(int i, int j) {
        if (j >= size && i < size-1) { 
            i = i + 1; 
            j = 0; 
        } 
        if (i >= size && j >= size) {
            return true; 
        }
        
        if (i < boxSize){ 
            if (j < boxSize) 
                j = boxSize; 
        } 
        else if (i < size - boxSize) { 
            if (j==(int)(i / boxSize) * boxSize) 
                j =  j + boxSize; 
        } 
        else{ 
        	if (j == size-boxSize) { 
                i = i + 1; 
                j = 0; 
                if (i >= size) 
                    return true; 
            } 
        } 

        for (int num = 1; num <= size; num++) { 
            if (finished(i, j, num)) { 
                board[i][j] = num; 
                if (fillRemaining(i, j+1)) {
                    return true; 
                }
                board[i][j] = 0; 
            } 
        } 
        return false; 
    } 
  
    public void removeKDigits() { 
        int count = remove; 
        while (count != 0) { 
            int cellId = randomGenerator(size*size); 
            int i = (cellId/size); 
            int j = cellId%size; 
            if (j != 0) {
                j = j - 1;
            }
           
            if(i > size-1 ||j >size-1) {
            	continue;
            }
            if (board[i][j] != 0) { 
                count--; 
                board[i][j] = 0; 
            } 
        } 
    } 
	
	public boolean checkRow(int row, int num) {
		for (int i = 0; i < size; i++) {
			if (board[row][i] == num) {
				return false;
			}
		}
		return true;
	}
	
	public boolean checkColumn(int column, int num) {
		for (int i = 0; i < size; i++) {
			if (board[i][column] == num) {
				return false;
			}
		}
		return true;
	}
	
	public boolean checkBox(int rowStart, int colStart, int num){ 
        for (int i = 0; i < boxSize; i++) { 
            for (int j = 0; j < boxSize; j++) {
                if (board[rowStart+i][colStart+j]==num) {
                    return false; 
                }
            }
        }
        return true; 
	}

	public boolean finished(int row, int column, int number) {
		return  checkRow(row, number) && 
				checkColumn(column, number) && 
		        checkBox(row-row%boxSize, column-column%boxSize, number);
	}
	
	public int randomGenerator(int num) { 
	        return (int) Math.floor((Math.random()*num+1)); 
	} 
	
	public void setBoard(int[][] board) {
		this.board = board;
	}
	
	public int[][] getBoard(){
		return board;
	}
	
	public int getSize() {
		return size;
	}
	
	public int getBoxSize() {
		return boxSize;
	}
	
	public void printSudoku() {
		int rowCount = 0;
		String line = "";
		System.out.print("\n ");
		for (int j = 0; j < size; j++) {
        	System.out.print(RED+"-----"+RESET); 
        }
		System.out.println();
        for (int i = 0; i < size; i++) { 
        	rowCount++;
            for (int j = 0; j < size; j++) {
	            if(board[i][j] == 0) {
	            	line = "|   "; 
	            } else {
	            	line = "| " + board[i][j] + " "; 
	            }
            	System.out.printf("%5s", line);
            }
            
            System.out.print("|\n ");
            line = "";
            for (int j = 0; j < size; j++) {
            	if(rowCount == boxSize) {
            		System.out.print(RED+"-----"+RESET); 
            	} else {
            		System.out.print("-----"); 
            	}
            }
            if(rowCount == boxSize) {
            	rowCount = 0;
            }
            System.out.println(); 
        } 
        System.out.println(); 
    } 
}
